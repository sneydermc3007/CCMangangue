# Etapa 1: Construcción de la aplicación
FROM node:18-alpine AS build
WORKDIR /app

# Copiar archivos necesarios para instalar dependencias
COPY package*.json ./
# Instalar todas las dependencias para construir (incluyendo devDependencies)
RUN npm ci

# Copiar el resto de los archivos de la aplicación
COPY . ./
# Construir la aplicación Angular
RUN npm run build --configuration=production

# Etapa 2: Imagen final basada en Linux con Nginx
FROM nginx:stable-alpine
WORKDIR /usr/share/nginx/html

# Copiar la configuración personalizada de Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copiar la carpeta de salida de la etapa de construcción
COPY --from=build /app/dist/camara-comercio/browser /usr/share/nginx/html

# Instalar herramientas básicas de administración para simular un VPS
RUN apk add --no-cache \
    bash \
    curl \
    vim \
    htop \
    procps \
    net-tools \
    iputils \
    openssh-client \
    sudo

# Crear un usuario no-root para simular un entorno VPS más realista
RUN adduser -D -u 1000 vpsuser && \
    echo "vpsuser ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/vpsuser

# Configurar permisos
RUN chown -R vpsuser:vpsuser /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Exponer el puerto 80
EXPOSE 80

# Script de inicio para ejecutar Nginx y proporcionar una shell
COPY docker-entrypoint.sh /
RUN chmod +x /docker-entrypoint.sh

# Usar el script de inicio como punto de entrada
ENTRYPOINT ["/docker-entrypoint.sh"]

# Comando por defecto (puede ser sobrescrito)
CMD ["nginx", "-g", "daemon off;"] 